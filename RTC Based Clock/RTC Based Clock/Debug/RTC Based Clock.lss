
RTC Based Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000006ac  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ede  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074e  00000000  00000000  0000171e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000976  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  000027e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040a  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a18  00000000  00000000  00002d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000374a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  8a:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <print_sev_segment>:
	TWI_start();
	TWI_tx(0XD1);
	int s=TWI_rx();
	TWI_stop();
	return s;
}
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	2a bb       	out	0x1a, r18	; 26
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <print_sev_segment+0xe>
  9c:	22 0f       	add	r18, r18
  9e:	33 1f       	adc	r19, r19
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <print_sev_segment+0xa>
  a4:	27 bb       	out	0x17, r18	; 23
  a6:	28 bb       	out	0x18, r18	; 24
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	19 f4       	brne	.+6      	; 0xb2 <print_sev_segment+0x20>
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	08 95       	ret
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	91 05       	cpc	r25, r1
  b6:	19 f4       	brne	.+6      	; 0xbe <print_sev_segment+0x2c>
  b8:	89 ef       	ldi	r24, 0xF9	; 249
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	19 f4       	brne	.+6      	; 0xca <print_sev_segment+0x38>
  c4:	84 ea       	ldi	r24, 0xA4	; 164
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	08 95       	ret
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	19 f4       	brne	.+6      	; 0xd6 <print_sev_segment+0x44>
  d0:	80 eb       	ldi	r24, 0xB0	; 176
  d2:	8b bb       	out	0x1b, r24	; 27
  d4:	08 95       	ret
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	91 05       	cpc	r25, r1
  da:	19 f4       	brne	.+6      	; 0xe2 <print_sev_segment+0x50>
  dc:	89 e9       	ldi	r24, 0x99	; 153
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	08 95       	ret
  e2:	85 30       	cpi	r24, 0x05	; 5
  e4:	91 05       	cpc	r25, r1
  e6:	19 f4       	brne	.+6      	; 0xee <print_sev_segment+0x5c>
  e8:	82 e9       	ldi	r24, 0x92	; 146
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	08 95       	ret
  ee:	86 30       	cpi	r24, 0x06	; 6
  f0:	91 05       	cpc	r25, r1
  f2:	19 f4       	brne	.+6      	; 0xfa <print_sev_segment+0x68>
  f4:	82 e8       	ldi	r24, 0x82	; 130
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	08 95       	ret
  fa:	87 30       	cpi	r24, 0x07	; 7
  fc:	91 05       	cpc	r25, r1
  fe:	19 f4       	brne	.+6      	; 0x106 <print_sev_segment+0x74>
 100:	88 ef       	ldi	r24, 0xF8	; 248
 102:	8b bb       	out	0x1b, r24	; 27
 104:	08 95       	ret
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	91 05       	cpc	r25, r1
 10a:	19 f4       	brne	.+6      	; 0x112 <print_sev_segment+0x80>
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	08 95       	ret
 112:	09 97       	sbiw	r24, 0x09	; 9
 114:	11 f4       	brne	.+4      	; 0x11a <print_sev_segment+0x88>
 116:	80 e9       	ldi	r24, 0x90	; 144
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	08 95       	ret

0000011c <TWI_start>:
 11c:	84 ea       	ldi	r24, 0xA4	; 164
 11e:	86 bf       	out	0x36, r24	; 54
 120:	06 b6       	in	r0, 0x36	; 54
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <TWI_start+0x4>
 126:	08 95       	ret

00000128 <TWI_tx>:
 128:	83 b9       	out	0x03, r24	; 3
 12a:	84 e8       	ldi	r24, 0x84	; 132
 12c:	86 bf       	out	0x36, r24	; 54
 12e:	06 b6       	in	r0, 0x36	; 54
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <TWI_tx+0x6>
 134:	08 95       	ret

00000136 <TWI_rx>:
 136:	84 e8       	ldi	r24, 0x84	; 132
 138:	86 bf       	out	0x36, r24	; 54
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <TWI_rx+0x4>
 140:	83 b1       	in	r24, 0x03	; 3
 142:	08 95       	ret

00000144 <update_time>:
//------------------------------------------------------------------------------------//
void update_time(){
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	 int s,m,h;
	TWI_start();
 14a:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_start>
	TWI_tx(0XD0);
 14e:	80 ed       	ldi	r24, 0xD0	; 208
 150:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_tx(0x00);// sec location
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_start();
 15a:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_start>
	TWI_tx(0XD1);
 15e:	81 ed       	ldi	r24, 0xD1	; 209
 160:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	s=TWI_rx();
 164:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_rx>
 168:	d8 2f       	mov	r29, r24
	while((TWCR&0b10000000)==0b00000000);
}

void TWI_stop()
{
	TWCR=0b10010100;
 16a:	14 e9       	ldi	r17, 0x94	; 148
 16c:	16 bf       	out	0x36, r17	; 54
	TWI_start();
	TWI_tx(0XD1);
	s=TWI_rx();
	TWI_stop();

	TWI_start();
 16e:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_start>
	TWI_tx(0XD0);
 172:	80 ed       	ldi	r24, 0xD0	; 208
 174:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_tx(0x01);// sec location
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_start();
 17e:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_start>
	TWI_tx(0XD1);
 182:	81 ed       	ldi	r24, 0xD1	; 209
 184:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	m=TWI_rx();
 188:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_rx>
 18c:	c8 2f       	mov	r28, r24
	while((TWCR&0b10000000)==0b00000000);
}

void TWI_stop()
{
	TWCR=0b10010100;
 18e:	16 bf       	out	0x36, r17	; 54
	TWI_start();
	TWI_tx(0XD1);
	m=TWI_rx();
	TWI_stop();

	TWI_start();
 190:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_start>
	TWI_tx(0XD0);
 194:	80 ed       	ldi	r24, 0xD0	; 208
 196:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_tx(0x02);// sec location
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_start();
 1a0:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_start>
	TWI_tx(0XD1);
 1a4:	81 ed       	ldi	r24, 0xD1	; 209
 1a6:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	h=TWI_rx();
 1aa:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_rx>
	while((TWCR&0b10000000)==0b00000000);
}

void TWI_stop()
{
	TWCR=0b10010100;
 1ae:	16 bf       	out	0x36, r17	; 54
	TWI_tx(0XD1);
	h=TWI_rx();
	TWI_stop();
	
	//sec value
	time[5]=s&0B00001111;
 1b0:	e6 e7       	ldi	r30, 0x76	; 118
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	2d 2f       	mov	r18, r29
 1b6:	2f 70       	andi	r18, 0x0F	; 15
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	33 87       	std	Z+11, r19	; 0x0b
 1bc:	22 87       	std	Z+10, r18	; 0x0a
	time[4]=s>>4;
 1be:	2d 2f       	mov	r18, r29
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	35 95       	asr	r19
 1c4:	27 95       	ror	r18
 1c6:	35 95       	asr	r19
 1c8:	27 95       	ror	r18
 1ca:	35 95       	asr	r19
 1cc:	27 95       	ror	r18
 1ce:	35 95       	asr	r19
 1d0:	27 95       	ror	r18
 1d2:	31 87       	std	Z+9, r19	; 0x09
 1d4:	20 87       	std	Z+8, r18	; 0x08
	// min
	time[3]=m&0B00001111;
 1d6:	2c 2f       	mov	r18, r28
 1d8:	2f 70       	andi	r18, 0x0F	; 15
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	37 83       	std	Z+7, r19	; 0x07
 1de:	26 83       	std	Z+6, r18	; 0x06
	time[2]=m>>4;
 1e0:	2c 2f       	mov	r18, r28
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	35 95       	asr	r19
 1e6:	27 95       	ror	r18
 1e8:	35 95       	asr	r19
 1ea:	27 95       	ror	r18
 1ec:	35 95       	asr	r19
 1ee:	27 95       	ror	r18
 1f0:	35 95       	asr	r19
 1f2:	27 95       	ror	r18
 1f4:	35 83       	std	Z+5, r19	; 0x05
 1f6:	24 83       	std	Z+4, r18	; 0x04
	//hour
	time[1]=h&0B00001111;
 1f8:	28 2f       	mov	r18, r24
 1fa:	2f 70       	andi	r18, 0x0F	; 15
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	33 83       	std	Z+3, r19	; 0x03
 200:	22 83       	std	Z+2, r18	; 0x02
	time[0]=h>>4;
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	95 95       	asr	r25
 20a:	87 95       	ror	r24
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
 210:	95 95       	asr	r25
 212:	87 95       	ror	r24
 214:	91 83       	std	Z+1, r25	; 0x01
 216:	80 83       	st	Z, r24
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	08 95       	ret

00000220 <settime>:
void settime(){
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
	TWI_start();
 224:	0e 94 8e 00 	call	0x11c	; 0x11c <TWI_start>
	TWI_tx(0xD0);
 228:	80 ed       	ldi	r24, 0xD0	; 208
 22a:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_tx(0x00);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_tx(((time[5])|(time[4]<<4)));
 234:	c6 e7       	ldi	r28, 0x76	; 118
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	88 85       	ldd	r24, Y+8	; 0x08
 23a:	99 85       	ldd	r25, Y+9	; 0x09
 23c:	82 95       	swap	r24
 23e:	92 95       	swap	r25
 240:	90 7f       	andi	r25, 0xF0	; 240
 242:	98 27       	eor	r25, r24
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	98 27       	eor	r25, r24
 248:	9a 85       	ldd	r25, Y+10	; 0x0a
 24a:	89 2b       	or	r24, r25
 24c:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_tx(((time[3])|(time[2]<<4)));
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	9d 81       	ldd	r25, Y+5	; 0x05
 254:	82 95       	swap	r24
 256:	92 95       	swap	r25
 258:	90 7f       	andi	r25, 0xF0	; 240
 25a:	98 27       	eor	r25, r24
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	98 27       	eor	r25, r24
 260:	9e 81       	ldd	r25, Y+6	; 0x06
 262:	89 2b       	or	r24, r25
 264:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	TWI_tx(((time[1])|(time[0]<<4)));
 268:	88 81       	ld	r24, Y
 26a:	99 81       	ldd	r25, Y+1	; 0x01
 26c:	82 95       	swap	r24
 26e:	92 95       	swap	r25
 270:	90 7f       	andi	r25, 0xF0	; 240
 272:	98 27       	eor	r25, r24
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	98 27       	eor	r25, r24
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	89 2b       	or	r24, r25
 27c:	0e 94 94 00 	call	0x128	; 0x128 <TWI_tx>
	while((TWCR&0b10000000)==0b00000000);
}

void TWI_stop()
{
	TWCR=0b10010100;
 280:	84 e9       	ldi	r24, 0x94	; 148
 282:	86 bf       	out	0x36, r24	; 54
	TWI_tx(0x00);
	TWI_tx(((time[5])|(time[4]<<4)));
	TWI_tx(((time[3])|(time[2]<<4)));
	TWI_tx(((time[1])|(time[0]<<4)));
	TWI_stop();
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <main>:
int main(void)
{
	//TWI Registers
   TWBR=8;
 28a:	88 e0       	ldi	r24, 0x08	; 8
 28c:	80 b9       	out	0x00, r24	; 0
   TWCR=0b11000100;
 28e:	84 ec       	ldi	r24, 0xC4	; 196
 290:	86 bf       	out	0x36, r24	; 54
   TWSR=0;
 292:	11 b8       	out	0x01, r1	; 1
   DDRC = 0;
 294:	14 ba       	out	0x14, r1	; 20
   PORTC |= 0b00000011;
 296:	85 b3       	in	r24, 0x15	; 21
 298:	83 60       	ori	r24, 0x03	; 3
 29a:	85 bb       	out	0x15, r24	; 21
   //TImer Registers
   TCNT0 = 0;
 29c:	12 be       	out	0x32, r1	; 50
   TCCR0 = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	83 bf       	out	0x33, r24	; 51
   TIFR = 0;
 2a2:	18 be       	out	0x38, r1	; 56
   TIMSK = 1;
 2a4:	89 bf       	out	0x39, r24	; 57
    while (1) 
    {
			DDRD = 1<< mode;
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f8 e6       	ldi	r31, 0x68	; 104
 2aa:	af 2e       	mov	r10, r31
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	bf 2e       	mov	r11, r31
 2b0:	f0 2d       	mov	r31, r0
 2b2:	cc 24       	eor	r12, r12
 2b4:	c3 94       	inc	r12
 2b6:	d1 2c       	mov	r13, r1
			PORTD = 1<<mode;
			if((PINC&(1<<MODE_SW))==0)
 2b8:	0f 2e       	mov	r0, r31
 2ba:	f6 e6       	ldi	r31, 0x66	; 102
 2bc:	6f 2e       	mov	r6, r31
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	7f 2e       	mov	r7, r31
 2c2:	f0 2d       	mov	r31, r0
					mode = 0;
				}
			}
			
			
			else if((PINC&(1<<UP))==0)
 2c4:	0f 2e       	mov	r0, r31
 2c6:	f4 e6       	ldi	r31, 0x64	; 100
 2c8:	4f 2e       	mov	r4, r31
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	5f 2e       	mov	r5, r31
 2ce:	f0 2d       	mov	r31, r0
						time[0] = 0;
						time[1]=0;
						
					}
			}
			else if((PINC&(1<<DOWN))==0)
 2d0:	0f 2e       	mov	r0, r31
 2d2:	f2 e6       	ldi	r31, 0x62	; 98
 2d4:	2f 2e       	mov	r2, r31
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	3f 2e       	mov	r3, r31
 2da:	f0 2d       	mov	r31, r0
				else if(mode == 2)
				{
					time[1]--;
				}
				else{}
					if(time[5]>=10)
 2dc:	06 e7       	ldi	r16, 0x76	; 118
 2de:	10 e0       	ldi	r17, 0x00	; 0
 2e0:	0f 2e       	mov	r0, r31
 2e2:	f6 e7       	ldi	r31, 0x76	; 118
 2e4:	ef 2e       	mov	r14, r31
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	ff 2e       	mov	r15, r31
 2ea:	f0 2d       	mov	r31, r0
   TCCR0 = 1;
   TIFR = 0;
   TIMSK = 1;
    while (1) 
    {
			DDRD = 1<< mode;
 2ec:	c6 01       	movw	r24, r12
 2ee:	f5 01       	movw	r30, r10
 2f0:	00 80       	ld	r0, Z
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <main+0x6e>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <main+0x6a>
 2fc:	81 bb       	out	0x11, r24	; 17
			PORTD = 1<<mode;
 2fe:	c6 01       	movw	r24, r12
 300:	00 80       	ld	r0, Z
 302:	02 c0       	rjmp	.+4      	; 0x308 <main+0x7e>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <main+0x7a>
 30c:	82 bb       	out	0x12, r24	; 18
			if((PINC&(1<<MODE_SW))==0)
 30e:	83 b3       	in	r24, 0x13	; 19
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	f3 01       	movw	r30, r6
 314:	00 80       	ld	r0, Z
 316:	02 c0       	rjmp	.+4      	; 0x31c <main+0x92>
 318:	95 95       	asr	r25
 31a:	87 95       	ror	r24
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <main+0x8e>
 320:	80 fd       	sbrc	r24, 0
 322:	22 c0       	rjmp	.+68     	; 0x368 <main+0xde>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 324:	ff ef       	ldi	r31, 0xFF	; 255
 326:	24 e3       	ldi	r18, 0x34	; 52
 328:	8c e0       	ldi	r24, 0x0C	; 12
 32a:	f1 50       	subi	r31, 0x01	; 1
 32c:	20 40       	sbci	r18, 0x00	; 0
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0xa0>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0xaa>
 334:	00 00       	nop
			{
				_delay_ms(500);
				mode++;
 336:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <mode>
 33a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <mode+0x1>
 33e:	01 96       	adiw	r24, 0x01	; 1
				if((mode==3)|(mode>=5))
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	91 05       	cpc	r25, r1
 346:	09 f0       	breq	.+2      	; 0x34a <main+0xc0>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	21 11       	cpse	r18, r1
 34c:	08 c0       	rjmp	.+16     	; 0x35e <main+0xd4>
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	85 30       	cpi	r24, 0x05	; 5
 352:	91 05       	cpc	r25, r1
 354:	0c f4       	brge	.+2      	; 0x358 <main+0xce>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	22 23       	and	r18, r18
 35a:	09 f4       	brne	.+2      	; 0x35e <main+0xd4>
 35c:	7f c1       	rjmp	.+766    	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
				{
					mode = 0;
 35e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <mode+0x1>
 362:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <mode>
 366:	86 c1       	rjmp	.+780    	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
				}
			}
			
			
			else if((PINC&(1<<UP))==0)
 368:	83 b3       	in	r24, 0x13	; 19
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	f2 01       	movw	r30, r4
 36e:	00 80       	ld	r0, Z
 370:	02 c0       	rjmp	.+4      	; 0x376 <main+0xec>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <main+0xe8>
 37a:	80 fd       	sbrc	r24, 0
 37c:	79 c0       	rjmp	.+242    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 37e:	ff ef       	ldi	r31, 0xFF	; 255
 380:	24 e3       	ldi	r18, 0x34	; 52
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	f1 50       	subi	r31, 0x01	; 1
 386:	20 40       	sbci	r18, 0x00	; 0
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0xfa>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x104>
 38e:	00 00       	nop
			{
				_delay_ms(500);
				if(mode == 0)
 390:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <mode>
 394:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <mode+0x1>
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	39 f4       	brne	.+14     	; 0x3aa <main+0x120>
				{
					time[5]++;
 39c:	f8 01       	movw	r30, r16
 39e:	82 85       	ldd	r24, Z+10	; 0x0a
 3a0:	93 85       	ldd	r25, Z+11	; 0x0b
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	93 87       	std	Z+11, r25	; 0x0b
 3a6:	82 87       	std	Z+10, r24	; 0x0a
 3a8:	12 c0       	rjmp	.+36     	; 0x3ce <main+0x144>
				}
				else if(mode == 1)
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	91 05       	cpc	r25, r1
 3ae:	39 f4       	brne	.+14     	; 0x3be <main+0x134>
				{
					time[3]++;
 3b0:	f8 01       	movw	r30, r16
 3b2:	86 81       	ldd	r24, Z+6	; 0x06
 3b4:	97 81       	ldd	r25, Z+7	; 0x07
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	97 83       	std	Z+7, r25	; 0x07
 3ba:	86 83       	std	Z+6, r24	; 0x06
 3bc:	08 c0       	rjmp	.+16     	; 0x3ce <main+0x144>
				}
				else if(mode == 2)
 3be:	02 97       	sbiw	r24, 0x02	; 2
 3c0:	31 f4       	brne	.+12     	; 0x3ce <main+0x144>
				{
					time[1]++;
 3c2:	f8 01       	movw	r30, r16
 3c4:	82 81       	ldd	r24, Z+2	; 0x02
 3c6:	93 81       	ldd	r25, Z+3	; 0x03
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	93 83       	std	Z+3, r25	; 0x03
 3cc:	82 83       	std	Z+2, r24	; 0x02
				}
				else{}
					if(time[5]>=10)
 3ce:	f8 01       	movw	r30, r16
 3d0:	82 85       	ldd	r24, Z+10	; 0x0a
 3d2:	93 85       	ldd	r25, Z+11	; 0x0b
 3d4:	0a 97       	sbiw	r24, 0x0a	; 10
 3d6:	3c f0       	brlt	.+14     	; 0x3e6 <main+0x15c>
					{
						time[4]++;
 3d8:	80 85       	ldd	r24, Z+8	; 0x08
 3da:	91 85       	ldd	r25, Z+9	; 0x09
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	91 87       	std	Z+9, r25	; 0x09
 3e0:	80 87       	std	Z+8, r24	; 0x08
						time[5]=0;
 3e2:	13 86       	std	Z+11, r1	; 0x0b
 3e4:	12 86       	std	Z+10, r1	; 0x0a
					}
					if(time[4]>=6)
 3e6:	f8 01       	movw	r30, r16
 3e8:	80 85       	ldd	r24, Z+8	; 0x08
 3ea:	91 85       	ldd	r25, Z+9	; 0x09
 3ec:	06 97       	sbiw	r24, 0x06	; 6
 3ee:	4c f0       	brlt	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
					{
						time[3]++;
 3f0:	86 81       	ldd	r24, Z+6	; 0x06
 3f2:	97 81       	ldd	r25, Z+7	; 0x07
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	97 83       	std	Z+7, r25	; 0x07
 3f8:	86 83       	std	Z+6, r24	; 0x06
						time[4]=0;
 3fa:	11 86       	std	Z+9, r1	; 0x09
 3fc:	10 86       	std	Z+8, r1	; 0x08
						time[5]=0;
 3fe:	13 86       	std	Z+11, r1	; 0x0b
 400:	12 86       	std	Z+10, r1	; 0x0a
					}
					if(time[3]>=10)
 402:	f8 01       	movw	r30, r16
 404:	86 81       	ldd	r24, Z+6	; 0x06
 406:	97 81       	ldd	r25, Z+7	; 0x07
 408:	0a 97       	sbiw	r24, 0x0a	; 10
 40a:	3c f0       	brlt	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
					{
						time[2]++;
 40c:	84 81       	ldd	r24, Z+4	; 0x04
 40e:	95 81       	ldd	r25, Z+5	; 0x05
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	95 83       	std	Z+5, r25	; 0x05
 414:	84 83       	std	Z+4, r24	; 0x04
						time[3]=0;
 416:	17 82       	std	Z+7, r1	; 0x07
 418:	16 82       	std	Z+6, r1	; 0x06
					}
					if(time[2]>=6)
 41a:	f8 01       	movw	r30, r16
 41c:	84 81       	ldd	r24, Z+4	; 0x04
 41e:	95 81       	ldd	r25, Z+5	; 0x05
 420:	06 97       	sbiw	r24, 0x06	; 6
 422:	4c f0       	brlt	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
					{
						time[1]++;
 424:	82 81       	ldd	r24, Z+2	; 0x02
 426:	93 81       	ldd	r25, Z+3	; 0x03
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	93 83       	std	Z+3, r25	; 0x03
 42c:	82 83       	std	Z+2, r24	; 0x02
						time[3]=0;
 42e:	17 82       	std	Z+7, r1	; 0x07
 430:	16 82       	std	Z+6, r1	; 0x06
						time[2]=0;
 432:	15 82       	std	Z+5, r1	; 0x05
 434:	14 82       	std	Z+4, r1	; 0x04
					}
					if(time[1]>=10)
 436:	f8 01       	movw	r30, r16
 438:	82 81       	ldd	r24, Z+2	; 0x02
 43a:	93 81       	ldd	r25, Z+3	; 0x03
 43c:	0a 97       	sbiw	r24, 0x0a	; 10
 43e:	44 f0       	brlt	.+16     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
					{
						time[0]++;
 440:	80 81       	ld	r24, Z
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	91 83       	std	Z+1, r25	; 0x01
 448:	80 83       	st	Z, r24
						time[1]=0;
 44a:	13 82       	std	Z+3, r1	; 0x03
 44c:	12 82       	std	Z+2, r1	; 0x02
 44e:	0a c1       	rjmp	.+532    	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
					}
					if(((time[0]==2)&&(time[1])==5))
 450:	f8 01       	movw	r30, r16
 452:	80 81       	ld	r24, Z
 454:	91 81       	ldd	r25, Z+1	; 0x01
 456:	02 97       	sbiw	r24, 0x02	; 2
 458:	09 f0       	breq	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	04 c1       	rjmp	.+520    	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 45c:	82 81       	ldd	r24, Z+2	; 0x02
 45e:	93 81       	ldd	r25, Z+3	; 0x03
 460:	05 97       	sbiw	r24, 0x05	; 5
 462:	09 f0       	breq	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 464:	ff c0       	rjmp	.+510    	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
					{
						time[0] = 0;
 466:	11 82       	std	Z+1, r1	; 0x01
 468:	10 82       	st	Z, r1
						time[1]=0;
 46a:	13 82       	std	Z+3, r1	; 0x03
 46c:	12 82       	std	Z+2, r1	; 0x02
 46e:	fa c0       	rjmp	.+500    	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
						
					}
			}
			else if((PINC&(1<<DOWN))==0)
 470:	83 b3       	in	r24, 0x13	; 19
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	f1 01       	movw	r30, r2
 476:	00 80       	ld	r0, Z
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	95 95       	asr	r25
 47c:	87 95       	ror	r24
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	80 fd       	sbrc	r24, 0
 484:	ce c0       	rjmp	.+412    	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 486:	ff ef       	ldi	r31, 0xFF	; 255
 488:	24 e3       	ldi	r18, 0x34	; 52
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	f1 50       	subi	r31, 0x01	; 1
 48e:	20 40       	sbci	r18, 0x00	; 0
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 496:	00 00       	nop
			{
				_delay_ms(500);
				if(mode == 0)
 498:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <mode>
 49c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <mode+0x1>
 4a0:	00 97       	sbiw	r24, 0x00	; 0
 4a2:	39 f4       	brne	.+14     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
				{
					time[5]--;
 4a4:	f8 01       	movw	r30, r16
 4a6:	82 85       	ldd	r24, Z+10	; 0x0a
 4a8:	93 85       	ldd	r25, Z+11	; 0x0b
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	93 87       	std	Z+11, r25	; 0x0b
 4ae:	82 87       	std	Z+10, r24	; 0x0a
 4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				}
				else if(mode == 1)
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	91 05       	cpc	r25, r1
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
				{
					time[3]--;
 4b8:	f8 01       	movw	r30, r16
 4ba:	86 81       	ldd	r24, Z+6	; 0x06
 4bc:	97 81       	ldd	r25, Z+7	; 0x07
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	97 83       	std	Z+7, r25	; 0x07
 4c2:	86 83       	std	Z+6, r24	; 0x06
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				}
				else if(mode == 2)
 4c6:	02 97       	sbiw	r24, 0x02	; 2
 4c8:	31 f4       	brne	.+12     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				{
					time[1]--;
 4ca:	f8 01       	movw	r30, r16
 4cc:	82 81       	ldd	r24, Z+2	; 0x02
 4ce:	93 81       	ldd	r25, Z+3	; 0x03
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	93 83       	std	Z+3, r25	; 0x03
 4d4:	82 83       	std	Z+2, r24	; 0x02
				}
				else{}
					if(time[5]>=10)
 4d6:	f8 01       	movw	r30, r16
 4d8:	82 85       	ldd	r24, Z+10	; 0x0a
 4da:	93 85       	ldd	r25, Z+11	; 0x0b
 4dc:	0a 97       	sbiw	r24, 0x0a	; 10
 4de:	3c f0       	brlt	.+14     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
					{
						time[4]++;
 4e0:	80 85       	ldd	r24, Z+8	; 0x08
 4e2:	91 85       	ldd	r25, Z+9	; 0x09
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	91 87       	std	Z+9, r25	; 0x09
 4e8:	80 87       	std	Z+8, r24	; 0x08
						time[5]=0;
 4ea:	13 86       	std	Z+11, r1	; 0x0b
 4ec:	12 86       	std	Z+10, r1	; 0x0a
					}
					if(time[4]>=6)
 4ee:	f8 01       	movw	r30, r16
 4f0:	80 85       	ldd	r24, Z+8	; 0x08
 4f2:	91 85       	ldd	r25, Z+9	; 0x09
 4f4:	06 97       	sbiw	r24, 0x06	; 6
 4f6:	4c f0       	brlt	.+18     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
					{
						time[3]++;
 4f8:	86 81       	ldd	r24, Z+6	; 0x06
 4fa:	97 81       	ldd	r25, Z+7	; 0x07
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	97 83       	std	Z+7, r25	; 0x07
 500:	86 83       	std	Z+6, r24	; 0x06
						time[4]=0;
 502:	11 86       	std	Z+9, r1	; 0x09
 504:	10 86       	std	Z+8, r1	; 0x08
						time[5]=0;
 506:	13 86       	std	Z+11, r1	; 0x0b
 508:	12 86       	std	Z+10, r1	; 0x0a
					}
					if(time[3]>=10)
 50a:	f8 01       	movw	r30, r16
 50c:	86 81       	ldd	r24, Z+6	; 0x06
 50e:	97 81       	ldd	r25, Z+7	; 0x07
 510:	0a 97       	sbiw	r24, 0x0a	; 10
 512:	3c f0       	brlt	.+14     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
					{
						time[2]++;
 514:	84 81       	ldd	r24, Z+4	; 0x04
 516:	95 81       	ldd	r25, Z+5	; 0x05
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	95 83       	std	Z+5, r25	; 0x05
 51c:	84 83       	std	Z+4, r24	; 0x04
						time[3]=0;
 51e:	17 82       	std	Z+7, r1	; 0x07
 520:	16 82       	std	Z+6, r1	; 0x06
					}
					if(time[2]>=6)
 522:	f8 01       	movw	r30, r16
 524:	84 81       	ldd	r24, Z+4	; 0x04
 526:	95 81       	ldd	r25, Z+5	; 0x05
 528:	06 97       	sbiw	r24, 0x06	; 6
 52a:	4c f0       	brlt	.+18     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
					{
						time[1]++;
 52c:	82 81       	ldd	r24, Z+2	; 0x02
 52e:	93 81       	ldd	r25, Z+3	; 0x03
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	93 83       	std	Z+3, r25	; 0x03
 534:	82 83       	std	Z+2, r24	; 0x02
						time[3]=0;
 536:	17 82       	std	Z+7, r1	; 0x07
 538:	16 82       	std	Z+6, r1	; 0x06
						time[2]=0;
 53a:	15 82       	std	Z+5, r1	; 0x05
 53c:	14 82       	std	Z+4, r1	; 0x04
					}
					if(time[1]>=10)
 53e:	f8 01       	movw	r30, r16
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	8a 30       	cpi	r24, 0x0A	; 10
 546:	91 05       	cpc	r25, r1
 548:	44 f0       	brlt	.+16     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
					{
						time[0]++;
 54a:	80 81       	ld	r24, Z
 54c:	91 81       	ldd	r25, Z+1	; 0x01
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	91 83       	std	Z+1, r25	; 0x01
 552:	80 83       	st	Z, r24
						time[1]=0;
 554:	13 82       	std	Z+3, r1	; 0x03
 556:	12 82       	std	Z+2, r1	; 0x02
 558:	0c c0       	rjmp	.+24     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
					}
					if(((time[0]==2)&&(time[1])==5))
 55a:	f8 01       	movw	r30, r16
 55c:	20 81       	ld	r18, Z
 55e:	31 81       	ldd	r19, Z+1	; 0x01
 560:	22 30       	cpi	r18, 0x02	; 2
 562:	31 05       	cpc	r19, r1
 564:	31 f4       	brne	.+12     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 566:	05 97       	sbiw	r24, 0x05	; 5
 568:	21 f4       	brne	.+8      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
					{
						time[0] = 0;
 56a:	11 82       	std	Z+1, r1	; 0x01
 56c:	10 82       	st	Z, r1
						time[1]=0;
 56e:	13 82       	std	Z+3, r1	; 0x03
 570:	12 82       	std	Z+2, r1	; 0x02
						
					}
					
					//---------------------------
					if(time[5]<0)
 572:	f8 01       	movw	r30, r16
 574:	82 85       	ldd	r24, Z+10	; 0x0a
 576:	93 85       	ldd	r25, Z+11	; 0x0b
 578:	99 23       	and	r25, r25
 57a:	4c f4       	brge	.+18     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
					{
						time[4]--;
 57c:	80 85       	ldd	r24, Z+8	; 0x08
 57e:	91 85       	ldd	r25, Z+9	; 0x09
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	91 87       	std	Z+9, r25	; 0x09
 584:	80 87       	std	Z+8, r24	; 0x08
						time[5]=9;
 586:	89 e0       	ldi	r24, 0x09	; 9
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	93 87       	std	Z+11, r25	; 0x0b
 58c:	82 87       	std	Z+10, r24	; 0x0a
					}
					if(time[4]<0)
 58e:	f8 01       	movw	r30, r16
 590:	80 85       	ldd	r24, Z+8	; 0x08
 592:	91 85       	ldd	r25, Z+9	; 0x09
 594:	99 23       	and	r25, r25
 596:	6c f4       	brge	.+26     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
					{
						time[3]--;
 598:	86 81       	ldd	r24, Z+6	; 0x06
 59a:	97 81       	ldd	r25, Z+7	; 0x07
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	97 83       	std	Z+7, r25	; 0x07
 5a0:	86 83       	std	Z+6, r24	; 0x06
						time[4]=5;
 5a2:	85 e0       	ldi	r24, 0x05	; 5
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	91 87       	std	Z+9, r25	; 0x09
 5a8:	80 87       	std	Z+8, r24	; 0x08
						time[5]=9;
 5aa:	89 e0       	ldi	r24, 0x09	; 9
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	93 87       	std	Z+11, r25	; 0x0b
 5b0:	82 87       	std	Z+10, r24	; 0x0a
					}
					if(time[3]<0)
 5b2:	f8 01       	movw	r30, r16
 5b4:	86 81       	ldd	r24, Z+6	; 0x06
 5b6:	97 81       	ldd	r25, Z+7	; 0x07
 5b8:	99 23       	and	r25, r25
 5ba:	4c f4       	brge	.+18     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
					{
						time[2]--;
 5bc:	84 81       	ldd	r24, Z+4	; 0x04
 5be:	95 81       	ldd	r25, Z+5	; 0x05
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	95 83       	std	Z+5, r25	; 0x05
 5c4:	84 83       	std	Z+4, r24	; 0x04
						time[3]=9;
 5c6:	89 e0       	ldi	r24, 0x09	; 9
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	97 83       	std	Z+7, r25	; 0x07
 5cc:	86 83       	std	Z+6, r24	; 0x06
					}
					if(time[2]<0)
 5ce:	f8 01       	movw	r30, r16
 5d0:	84 81       	ldd	r24, Z+4	; 0x04
 5d2:	95 81       	ldd	r25, Z+5	; 0x05
 5d4:	99 23       	and	r25, r25
 5d6:	6c f4       	brge	.+26     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
					{
						time[1]--;
 5d8:	82 81       	ldd	r24, Z+2	; 0x02
 5da:	93 81       	ldd	r25, Z+3	; 0x03
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	93 83       	std	Z+3, r25	; 0x03
 5e0:	82 83       	std	Z+2, r24	; 0x02
						time[3]=9;
 5e2:	89 e0       	ldi	r24, 0x09	; 9
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	97 83       	std	Z+7, r25	; 0x07
 5e8:	86 83       	std	Z+6, r24	; 0x06
						time[2]=5;
 5ea:	85 e0       	ldi	r24, 0x05	; 5
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	95 83       	std	Z+5, r25	; 0x05
 5f0:	84 83       	std	Z+4, r24	; 0x04
					}
					if(time[1]<0)
 5f2:	f8 01       	movw	r30, r16
 5f4:	82 81       	ldd	r24, Z+2	; 0x02
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	99 23       	and	r25, r25
 5fa:	4c f4       	brge	.+18     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
					{
						time[0]--;
 5fc:	80 81       	ld	r24, Z
 5fe:	91 81       	ldd	r25, Z+1	; 0x01
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	91 83       	std	Z+1, r25	; 0x01
 604:	80 83       	st	Z, r24
						time[1]=9;
 606:	89 e0       	ldi	r24, 0x09	; 9
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	93 83       	std	Z+3, r25	; 0x03
 60c:	82 83       	std	Z+2, r24	; 0x02
					}
					if(time[0]<0)
 60e:	f8 01       	movw	r30, r16
 610:	80 81       	ld	r24, Z
 612:	91 81       	ldd	r25, Z+1	; 0x01
 614:	99 23       	and	r25, r25
 616:	34 f5       	brge	.+76     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
					{
						time[0] = 0;
 618:	11 82       	std	Z+1, r1	; 0x01
 61a:	10 82       	st	Z, r1
						time[1]=0;
 61c:	13 82       	std	Z+3, r1	; 0x03
 61e:	12 82       	std	Z+2, r1	; 0x02
 620:	21 c0       	rjmp	.+66     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
						
					}
			}	
		else if((PINC&(1<<OK_SW))==(0))
 622:	83 b3       	in	r24, 0x13	; 19
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	e0 e6       	ldi	r30, 0x60	; 96
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	00 80       	ld	r0, Z
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	95 95       	asr	r25
 630:	87 95       	ror	r24
 632:	0a 94       	dec	r0
 634:	e2 f7       	brpl	.-8      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 636:	80 fd       	sbrc	r24, 0
 638:	15 c0       	rjmp	.+42     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
		{
			if(mode!=4){
 63a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <mode>
 63e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <mode+0x1>
 642:	04 97       	sbiw	r24, 0x04	; 4
 644:	21 f0       	breq	.+8      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
				settime();
 646:	0e 94 10 01 	call	0x220	; 0x220 <settime>
				DDRD|=1<<3;
 64a:	8b 9a       	sbi	0x11, 3	; 17
				PORTD|=1<<3;
 64c:	93 9a       	sbi	0x12, 3	; 18
			}
			mode = 4;
 64e:	84 e0       	ldi	r24, 0x04	; 4
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <mode+0x1>
 656:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <mode>
 65a:	0a c0       	rjmp	.+20     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
			DDRD = 1<< mode;
			PORTD = 1<<mode;
			if((PINC&(1<<MODE_SW))==0)
			{
				_delay_ms(500);
				mode++;
 65c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <mode+0x1>
 660:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <mode>
			}
			mode = 4;
			
		}
		
			if(mode==4){
 664:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <mode>
 668:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <mode+0x1>
 66c:	04 97       	sbiw	r24, 0x04	; 4
 66e:	11 f4       	brne	.+4      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
				update_time();
 670:	0e 94 a2 00 	call	0x144	; 0x144 <update_time>
 674:	ca e6       	ldi	r28, 0x6A	; 106
 676:	d0 e0       	ldi	r29, 0x00	; 0
 678:	0f 2e       	mov	r0, r31
 67a:	f6 e7       	ldi	r31, 0x76	; 118
 67c:	8f 2e       	mov	r8, r31
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	9f 2e       	mov	r9, r31
 682:	f0 2d       	mov	r31, r0
				}
			for(int r = 0;r<=5;r++)
			{
				print_sev_segment(time[r],sev_seg_pin[r]);
 684:	69 91       	ld	r22, Y+
 686:	79 91       	ld	r23, Y+
 688:	f4 01       	movw	r30, r8
 68a:	81 91       	ld	r24, Z+
 68c:	91 91       	ld	r25, Z+
 68e:	4f 01       	movw	r8, r30
 690:	0e 94 49 00 	call	0x92	; 0x92 <print_sev_segment>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 694:	8f ea       	ldi	r24, 0xAF	; 175
 696:	94 e0       	ldi	r25, 0x04	; 4
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 69e:	00 00       	nop
		}
		
			if(mode==4){
				update_time();
				}
			for(int r = 0;r<=5;r++)
 6a0:	ce 15       	cp	r28, r14
 6a2:	df 05       	cpc	r29, r15
 6a4:	79 f7       	brne	.-34     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 6a6:	22 ce       	rjmp	.-956    	; 0x2ec <main+0x62>

000006a8 <_exit>:
 6a8:	f8 94       	cli

000006aa <__stop_program>:
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <__stop_program>
